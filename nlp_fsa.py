# -*- coding: utf-8 -*-
"""FSA_BERT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GBQ6l40S5XKwmAyBanyNt6afSRooR2c6

importing libraries
"""

import torch

from transformers import BertTokenizer
from transformers import BertForSequenceClassification, AdamW, BertConfig
from transformers import get_linear_schedule_with_warmup
from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.model_selection import train_test_split
from sklearn.metrics import f1_score
from string import punctuation

import pandas as pd
import numpy as np
import random
import time
import datetime
import matplotlib.pyplot as plt
import seaborn as sns
import re, string

## 여기만 파일에 맞춰서 바꾸세요 ##

df1 = pd.read_csv("./nlp_dataset/1_aug_tf_2500_100_sample_2500_.csv", encoding="latin-1")
df = df1[['sentence', 'label']].set_axis(['cmnt', 'sentiment'], axis=1)

df2 = pd.read_csv("./nlp_dataset/phr_test.csv", encoding="latin-1")
df_test = df2[['sentence', 'label']].set_axis(['cmnt', 'sentiment'], axis=1)

def remove_punctuation(text):
    text = text.encode('utf-8').decode('ascii', 'ignore')
    result = ""
    for t in text:
    	if t not in punctuation:
            result += t
    return result.strip()

def strip_all_entities(text): 
    text = text.replace('\r', '').replace('\n', ' ').replace('\n', ' ').lower() 
    text = re.sub(r"(?:\@|https?\://)\S+", "", text) 
    text = re.sub(r'[^\x00-\x7f]',r'', text)
    banned_list= string.punctuation + 'Ã'+'±'+'ã'+'¼'+'â'+'»'+'§'
    table = str.maketrans('', '', banned_list)
    text = text.translate(table)
    return text

def clean_hashtags(tweet):
    new_tweet = " ".join(word.strip() for word in re.split('#(?!(?:hashtag)\b)[\w-]+(?=(?:\s+#[\w-]+)*\s*$)', tweet)) 
    new_tweet2 = " ".join(word.strip() for word in re.split('#|_', new_tweet)) 
    return new_tweet2

def filter_chars(a):
    sent = []
    for word in a.split(' '):
        if ('$' in word) | ('&' in word):
            sent.append('')
        else:
            sent.append(word)
    return ' '.join(sent)

def remove_mult_spaces(text):
    return re.sub("\s\s+" , " ", text)

new_text = []
for t in df.cmnt:
    new_text.append(remove_mult_spaces(filter_chars(clean_hashtags(strip_all_entities(remove_punctuation(t))))))

df['cmnt'] = new_text

new_text = []
for t in df_test.cmnt:
    new_text.append(remove_mult_spaces(filter_chars(clean_hashtags(strip_all_entities(remove_punctuation(t))))))

df_test['cmnt'] = new_text

sents = []

for sent in df['sentiment']:
    if sent == 'negative':
        sents.append(0)
    elif sent == 'neutral':
        sents.append(1)
    else:
        sents.append(2)

df['sentiment'] = sents

sents = []

for sent in df_test['sentiment']:
    if sent == 'negative':
        sents.append(0)
    elif sent == 'neutral':
        sents.append(1)
    else:
        sents.append(2)

df_test['sentiment'] = sents

# train_test_split
x_all, x_fake, y_all, y_fake = train_test_split(df.cmnt, df.sentiment, test_size=0.2, shuffle=True, stratify=df.sentiment, random_state=42)
x_all = x_all.append(x_fake)
y_all = y_all.append(y_fake)

x_test, x_fake2, y_test, y_fake2 = train_test_split(df_test.cmnt, df_test.sentiment, test_size=0.2, shuffle=True, stratify=df_test.sentiment, random_state=42)
x_test = x_test.append(x_fake2)
y_test = y_test.append(y_fake2)


MAX_LEN = 128
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

train_text = ["[CLS] " + str(s) + " [SEP]" for s in x_all]
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')
tokenized_texts = [tokenizer.tokenize(s) for s in train_text]

print(tokenized_texts[0])

input_ids = [tokenizer.convert_tokens_to_ids(x) for x in tokenized_texts]
input_ids = pad_sequences(input_ids, maxlen=MAX_LEN, dtype='long', truncating='post', padding='post')

attention_masks = []

for seq in input_ids:
    seq_mask = [float(i>0) for i in seq]
    attention_masks.append(seq_mask)

# train_valid_split
x_train, x_valid, y_train, y_valid = train_test_split(input_ids, y_all.to_numpy(), test_size=0.1, shuffle=True, stratify=y_all, random_state=55)

train_masks, val_masks, _, _ = train_test_split(attention_masks,input_ids, test_size=0.1, shuffle=True, stratify=y_all, random_state=55)

train_inputs = torch.tensor(x_train)
train_labels = torch.tensor(y_train)
train_masks = torch.tensor(train_masks)
validation_inputs = torch.tensor(x_valid)
validation_labels = torch.tensor(y_valid)
validation_masks = torch.tensor(val_masks)

BATCH_SIZE = 32

train_data = TensorDataset(train_inputs, train_masks, train_labels)
train_sampler = RandomSampler(train_data)
train_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=BATCH_SIZE)

validation_data = TensorDataset(validation_inputs, validation_masks, validation_labels)
validation_sampler = SequentialSampler(validation_data)
validation_dataloader = DataLoader(validation_data, sampler=validation_sampler, batch_size=BATCH_SIZE)

sentences = ["[CLS] " + str(sentence) + " [SEP]" for sentence in x_test]
labels = y_test.values

tokenized_texts = [tokenizer.tokenize(sent) for sent in sentences]

input_ids = [tokenizer.convert_tokens_to_ids(x) for x in tokenized_texts]
input_ids = pad_sequences(input_ids, maxlen=MAX_LEN, dtype="long", truncating="post", padding="post")

attention_masks = []
for seq in input_ids:
    seq_mask = [float(i>0) for i in seq]
    attention_masks.append(seq_mask)

test_inputs = torch.tensor(input_ids)
test_labels = torch.tensor(labels)
test_masks = torch.tensor(attention_masks)

test_data = TensorDataset(test_inputs, test_masks, test_labels)
test_sampler = RandomSampler(test_data)
test_dataloader = DataLoader(test_data, sampler=test_sampler, batch_size=BATCH_SIZE)

model = BertForSequenceClassification.from_pretrained("bert-base-uncased", num_labels=3).cuda()

optimizer = torch.optim.AdamW(model.parameters(),
                  lr = 1e-5, 
                  eps = 1e-8
                )

epochs = 5

total_steps = len(train_dataloader) * epochs

scheduler = get_linear_schedule_with_warmup(optimizer, 
                                            num_warmup_steps = 0,
                                            num_training_steps = total_steps)

def flat_accuracy(preds, labels):
    pred_flat = np.argmax(preds, axis=1).flatten()
    labels_flat = labels.flatten()
    return np.sum(pred_flat == labels_flat) / len(labels_flat)

def weighted_f1_score_func(preds, labels):
    preds_flat = np.argmax(preds, axis=1).flatten()
    labels_flat = labels.flatten()
    return f1_score(labels_flat, preds_flat, average='weighted')

def micro_f1_score_func(preds, labels):
    preds_flat = np.argmax(preds, axis=1).flatten()
    labels_flat = labels.flatten()
    return f1_score(labels_flat, preds_flat, average='micro')

def format_time(elapsed):
    elapsed_rounded = int(round((elapsed)))
    return str(datetime.timedelta(seconds=elapsed_rounded))

seed_val = 33
random.seed(seed_val)
np.random.seed(seed_val)
torch.manual_seed(seed_val)
torch.cuda.manual_seed_all(seed_val)

model.zero_grad()

for epoch_i in range(0, epochs):
    
    # ========================================
    #               Training
    # ========================================
    
    print("")
    print('======== Epoch {:} / {:} ========'.format(epoch_i + 1, epochs))
    print('Training...')

    t0 = time.time()
    total_loss = 0

    model.train()
        
    for step, batch in enumerate(train_dataloader):
        if step % 200 == 0 and not step == 0:
            elapsed = format_time(time.time() - t0)
            print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(train_dataloader), elapsed))

        batch = tuple(t.to(device) for t in batch)
        b_input_ids, b_input_mask, b_labels = batch

        outputs = model(b_input_ids, 
                        token_type_ids=None, 
                        attention_mask=b_input_mask, 
                        labels=b_labels)
        
        loss = outputs[0]
        total_loss += loss.item()
        loss.backward()
        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)
        optimizer.step()
        scheduler.step()
        model.zero_grad()

    avg_train_loss = total_loss / len(train_dataloader)            

    print("")
    print("  Average training loss: {0:.3f}".format(avg_train_loss))
    print("  Training epcoh took: {:}".format(format_time(time.time() - t0)))
        
    # ========================================
    #               Validation
    # ========================================

    print("")
    print("Running Validation...")

    t0 = time.time()

    model.eval()

    eval_loss, eval_accuracy, weighted_eval_f1_score, micro_eval_f1_score = 0, 0, 0, 0
    nb_eval_steps, nb_eval_examples = 0, 0

    for batch in validation_dataloader:
        batch = tuple(t.to(device) for t in batch)
        b_input_ids, b_input_mask, b_labels = batch
        
        with torch.no_grad():    
            outputs = model(b_input_ids, 
                            token_type_ids=None, 
                            attention_mask=b_input_mask)
        
        logits = outputs[0]
        logits = logits.detach().cpu().numpy()
        label_ids = b_labels.to('cpu').numpy()
        
        tmp_eval_accuracy = flat_accuracy(logits, label_ids)
        eval_accuracy += tmp_eval_accuracy
        weighted_tmp_f1_score =weighted_f1_score_func(logits, label_ids)
        weighted_eval_f1_score += weighted_tmp_f1_score
        micro_tmp_f1_score = micro_f1_score_func(logits, label_ids)
        micro_eval_f1_score += micro_tmp_f1_score


        nb_eval_steps += 1

    # print("  Accuracy: {0:.3f}".format(eval_accuracy/nb_eval_steps))
    print("  Micro F1 score: {0:.3f}".format(micro_eval_f1_score/nb_eval_steps))
    print("  Weighted F1 score: {0:.3f}".format(weighted_eval_f1_score/nb_eval_steps))
    print("  Validation took: {:}".format(format_time(time.time() - t0)))

print("")
print("Training complete!")



t0 = time.time()
model.eval()

eval_loss, eval_accuracy, weighted_eval_f1_score, micro_eval_f1_score = 0, 0, 0, 0
nb_eval_steps, nb_eval_examples = 0, 0

for step, batch in enumerate(test_dataloader):
    if step % 100 == 0 and not step == 0:
        elapsed = format_time(time.time() - t0)
        print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(test_dataloader), elapsed))

    batch = tuple(t.to(device) for t in batch)
    b_input_ids, b_input_mask, b_labels = batch
    
    with torch.no_grad():     
        outputs = model(b_input_ids, 
                        token_type_ids=None, 
                        attention_mask=b_input_mask)
    
    logits = outputs[0]
    logits = logits.detach().cpu().numpy()
    label_ids = b_labels.to('cpu').numpy()

    tmp_eval_accuracy = flat_accuracy(logits, label_ids)
    eval_accuracy += tmp_eval_accuracy
    weighted_tmp_f1_score =weighted_f1_score_func(logits, label_ids)
    weighted_eval_f1_score += weighted_tmp_f1_score
    micro_tmp_f1_score = micro_f1_score_func(logits, label_ids)
    micro_eval_f1_score += micro_tmp_f1_score
    nb_eval_steps += 1


print("")
# print("Accuracy: {0:.3f}".format(eval_accuracy/nb_eval_steps))
print("Micro F1 score: {0:.3f}".format(micro_eval_f1_score/nb_eval_steps))
print("Weighted F1 score: {0:.3f}".format(weighted_eval_f1_score/nb_eval_steps))
print("Test took: {:}".format(format_time(time.time() - t0)))


def convert_input_data(sentences):

    tokenized_texts = [tokenizer.tokenize(sent) for sent in sentences]
    MAX_LEN = 128

    input_ids = [tokenizer.convert_tokens_to_ids(x) for x in tokenized_texts]
    input_ids = pad_sequences(input_ids, maxlen=MAX_LEN, dtype="long", truncating="post", padding="post")

    attention_masks = []

    for seq in input_ids:
        seq_mask = [float(i>0) for i in seq]
        attention_masks.append(seq_mask)

    inputs = torch.tensor(input_ids)
    masks = torch.tensor(attention_masks)

    return inputs, masks

def test_sentences(sentences):

    model.eval()
    inputs, masks = convert_input_data(sentences)

    b_input_ids = inputs.to(device)
    b_input_mask = masks.to(device)
            
    with torch.no_grad():     
        outputs = model(b_input_ids, 
                        token_type_ids=None, 
                        attention_mask=b_input_mask)

    logits = outputs[0]
    logits = logits.detach().cpu().numpy()

    return logits

while False:
    input_sentence = input("Input Sentence : ")
    if input_sentence == 'break':
        break

    logits = test_sentences([input_sentence])
    print(logits)

    if np.argmax(logits) == 2 :
        print("It's positive")
    elif np.argmax(logits) == 1 :
        print("It's neutral")
    elif np.argmax(logits) == 0 :
        print("It's negative")